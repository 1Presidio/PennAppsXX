{"version":3,"sources":["Image.js","App.js","serviceWorker.js","index.js"],"names":["Image","handleClick","props","displayResult","num","reset","src","this","img","onClick","alt","React","Component","App","state","order","result","img1","img2","componentDidMount","chooseImage","chooseOrder","setState","Math","random","numReal","floor","numFake","String","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAkBiBA,E,2MAZfC,YAAc,WACZ,EAAKC,MAAMC,cAAc,EAAKD,MAAME,KACpC,EAAKF,MAAMG,S,wEAIX,OACE,yBAAKC,IAAKC,KAAKL,MAAMM,IAAKC,QAASF,KAAKN,YAAaS,IAAI,c,GAV3CC,IAAMC,WCmEXC,G,iNAjEbC,MAAQ,CACNC,OAAO,EACPC,OAAQ,GACRC,KAAM,GACNC,KAAM,I,EAGRC,kBAAoB,WAClB,EAAKC,e,EAGPC,YAAc,WACZ,EAAKC,SAAS,CAAEP,MAAOQ,KAAKC,SAAW,M,EAGzCrB,cAAgB,SAACC,GACXA,GAAO,EAAKU,MAAMC,MACpB,EAAKO,SAAS,CAAEN,OAAQ,aAGxB,EAAKM,SAAS,CAAEN,OAAQ,kB,EAI5BI,YAAc,WACZ,IAAIK,EAAUF,KAAKG,MAAsB,IAAhBH,KAAKC,UAAkB,EAC5CG,EAAUJ,KAAKG,MAAsB,IAAhBH,KAAKC,UAC1B,EAAKV,MAAMC,MACb,EAAKO,SAAS,CAAEL,KAAM,oBAAsBW,OAAOH,GAAW,OAAQP,KAAM,oBAAsBU,OAAOD,GAAW,SAGpH,EAAKL,SAAS,CAAEL,KAAM,oBAAsBW,OAAOD,GAAW,OAAQT,KAAM,oBAAsBU,OAAOH,GAAW,U,EAIxHpB,MAAQ,WACN,EAAKgB,cACL,EAAKD,e,wEAIL,OACE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,8CACA,2BACGtB,KAAKO,MAAME,QAEd,kBAAC,EAAD,CAAOR,IAAKD,KAAKO,MAAMG,KAAMb,IAAI,IAAID,cAAeI,KAAKJ,cAAeE,MAAOE,KAAKF,QACpF,kBAAC,EAAD,CAAOG,IAAKD,KAAKO,MAAMI,KAAMd,IAAI,IAAID,cAAeI,KAAKJ,cAAeE,MAAOE,KAAKF,QACpF,+CACmB,mCADnB,YAGA,gHAGA,qE,GAzDQM,IAAMC,YCQJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.41895db3.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Image extends React.Component {\n\n  \n  handleClick = () => {\n    this.props.displayResult(this.props.num);\n    this.props.reset();\n  };\n\n  render() {\n    return (\n      <img src={this.props.img} onClick={this.handleClick} alt=\"image\" />\n    );\n  }\n  }\n  \n  export default Image;\n  ","import React from 'react';\nimport Image from './Image';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    order: false,\n    result: \"\",\n    img1: \"\",\n    img2: \"\",\n  };\n\n  componentDidMount = () => {\n    this.chooseImage();\n  };\n\n  chooseOrder = () => {\n    this.setState({ order: Math.random() > 0.5 });\n  };\n\n  displayResult = (num) => {\n    if (num == this.state.order) {\n      this.setState({ result: \"Correct!\" });\n    }\n    else {\n      this.setState({ result: \"Not correct!\" });\n    }\n  };\n\n  chooseImage = () => {\n    let numReal = Math.floor(Math.random() * 103) + 7;\n    let numFake = Math.floor(Math.random() * 250);\n    if (this.state.order) {\n      this.setState({ img1: \"./real_images/res\" + String(numReal) + \".png\", img2: \"./fake_images/res\" + String(numFake) + \".jpg\" });\n    }\n    else {\n      this.setState({ img1: \"./fake_images/res\" + String(numFake) + \".jpg\", img2: \"./real_images/res\" + String(numReal) + \".png\" });\n    }\n  };\n\n  reset = () => {\n    this.chooseOrder();\n    this.chooseImage();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> The GAN Game </h1>\n          <p>\n            {this.state.result}\n          </p>\n          <Image img={this.state.img1} num=\"0\" displayResult={this.displayResult} reset={this.reset}></Image>\n          <Image img={this.state.img2} num=\"1\" displayResult={this.displayResult} reset={this.reset}></Image>\n          <p>\n            Which one is the <b>fake</b> person?\n          </p>\n          <p>\n            Made by Kevin Hong (1presidio), Evan Feder (EvanFeder), and Daniel Lee (dj59205).\n          </p>\n          <p>\n            https://www.1presidio.github.io/\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}